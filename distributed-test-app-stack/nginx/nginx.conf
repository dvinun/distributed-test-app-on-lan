worker_processes 1;

error_log /dev/stdout info;
# error_log  /var/log/nginx/error.log warn;
pid        /tmp/nginx.pid;

events { worker_connections 1024; }

http {

	include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # access_log  /var/log/nginx/access.log  main;	
	access_log /dev/stdout;

    sendfile on;
	keepalive_timeout  65;
	
	client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp_path;
    fastcgi_temp_path     /tmp/fastcgi_temp;
    uwsgi_temp_path       /tmp/uwsgi_temp;
    scgi_temp_path        /tmp/scgi_temp;

	# used to reach to the proper targets by round-robin. 
	# ex: 10.40.0.21:80 -> 10.40.0.31:80 -> 10.40.0.32:80 so on...
    upstream distributed-test-app {
		# you can either use service name or docker host ip address as commented below.
		# the reason being all these containers are in the overlay network, they 
		# can communicate each other in a friendly way by using friendly names. 
		server distributed-test-app-stack_test-api:80;
		
		# server 10.40.0.21:80;
        # server 10.40.0.31:80;
        # server 10.40.0.32:80;
    }
	
    server {
        listen 8013;
		# listen 3200 default_server;
        
		# server_name localhost;	
		# server_name dockerdemo;
		# server_name 127.0.0.1;
		# server_name 192.111.1.111;
		
        location / {
            proxy_pass         http://distributed-test-app;
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            add_header         X-Upstream $upstream_addr;
        }
    }
}